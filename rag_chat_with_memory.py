import os
import sys
import logging
from typing import List, Dict, Any
from dotenv import load_dotenv
from langchain_gigachat.chat_models import GigaChat
from langchain_gigachat.embeddings import GigaChatEmbeddings
from langchain.schema import Document
from langchain.prompts import ChatPromptTemplate
from langchain.schema import AIMessage, HumanMessage, SystemMessage
import telebot
from telebot import types


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
load_dotenv()
GIGACHAT_API_KEY = "OTkyYTgyNGYtMjRlNC00MWYyLTg3M2UtYWRkYWVhM2QxNTM1OjI5YWY1YWFlLWVmMzItNDE1MS1iY2YwLWYxODAyOTZmMmUwNg=="
GIGACHAT_SCOPE = os.getenv('GIGACHAT_SCOPE', 'GIGACHAT_API_PERS')
KNOWLEDGE_BASE_PATH = os.getenv('KNOWLEDGE_BASE_PATH', 'knowledge_base.txt')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')

class RagChatWithMemory:
    def __init__(self):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é...")
        
        
        self.chat_model = GigaChat(
            credentials=GIGACHAT_API_KEY,
            scope=GIGACHAT_SCOPE,
            verify_ssl_certs=False,
            model="GigaChat"
        )
        
     
        self.embedding_model = GigaChatEmbeddings(
            credentials=GIGACHAT_API_KEY,
            scope=GIGACHAT_SCOPE,
            model="Embeddings",
            verify_ssl_certs=False
        )
        
       
        self.knowledge_base = self.load_knowledge_base(KNOWLEDGE_BASE_PATH)
        if not self.knowledge_base:
            sys.exit(1)
        self.embeddings = self.create_embeddings(self.knowledge_base)
        if not self.embeddings:
            sys.exit(1)
            
        
        self.conversation_history = {}
        self.system_message = SystemMessage(content="""
        –¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —à–∫–æ–ª—ã –¥–∏–∑–∞–π–Ω–∞. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —à–∫–æ–ª–µ.
        –¢—ã —É–º–µ–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
        
        –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, 
        —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç 
        –¥–µ—Ç–∞–ª–µ–π, –Ω–æ –æ–Ω–∏ —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
        
        –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö,
        –≤—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≤–æ–ø—Ä–æ—Å "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–∞—è –ø–∞—Ä–∞?",
        –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤.
        """)

    def load_knowledge_base(self, filepath: str) -> List[str]:
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            fragments = content.split('\\\\')
            fragments = [f.strip() for f in fragments if f.strip()]
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fragments)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return fragments
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def create_embeddings(self, fragments: List[str]) -> Dict[str, List[float]]:
       
        try:
            documents = [Document(page_content=fragment) for fragment in fragments]
            fragment_embeddings = {}
            
            for i, doc in enumerate(documents):
                embedding = self.embedding_model.embed_query(doc.page_content)
                fragment_embeddings[doc.page_content] = embedding
            
            print(f"–°–æ–∑–¥–∞–Ω—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è {len(fragment_embeddings)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            return fragment_embeddings
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return {}
    
    def _get_user_history(self, user_id: str) -> List[Any]:
        
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = [self.system_message]
        return self.conversation_history[user_id]
    
    def _add_to_history(self, user_id: str, message) -> None:
        
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = [self.system_message]
        
        self.conversation_history[user_id].append(message)
        
    
        if len(self.conversation_history[user_id]) > 10:
            self.conversation_history[user_id] = [self.system_message] + self.conversation_history[user_id][-9:]
    
    def find_relevant_fragments(self, query: str, top_n: int = 3) -> List[str]:
        
        try:
            query_embedding = self.embedding_model.embed_query(query)
            
            similarities = {}
            for fragment, fragment_embedding in self.embeddings.items():
                dot_product = sum(q * f for q, f in zip(query_embedding, fragment_embedding))
                query_norm = sum(q ** 2 for q in query_embedding) ** 0.5
                fragment_norm = sum(f ** 2 for f in fragment_embedding) ** 0.5
                similarity = dot_product / (query_norm * fragment_norm) if query_norm * fragment_norm > 0 else 0
                similarities[fragment] = similarity
            
            sorted_fragments = sorted(similarities.items(), key=lambda x: x[1], reverse=True)[:top_n]
            return [fragment for fragment, _ in sorted_fragments]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def process_query(self, user_id: str, query: str) -> str:
        
        try:
            
            user_message = HumanMessage(content=query)
            self._add_to_history(user_id, user_message)
            
           
            conversation_history = self._get_user_history(user_id)
            
            
            relevant_fragments = self.find_relevant_fragments(query)
            
            if not relevant_fragments:
               
                response = self.chat_model.invoke(conversation_history)
                self._add_to_history(user_id, AIMessage(content=response.content))
                return response.content
            
         
            context = "\n\n".join(relevant_fragments)
            context_message = HumanMessage(
                content=f"–í–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{context}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å."
            )
            
            
            messages = conversation_history + [context_message]
            response = self.chat_model.invoke(messages)
            
           
            self._add_to_history(user_id, AIMessage(content=response.content))
            
            return response.content
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            import traceback
            traceback.print_exc()
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def reset_history(self, user_id: str) -> None:
       
        if user_id in self.conversation_history:
            self.conversation_history[user_id] = [self.system_message]
            return True
        return False


def run_telegram_bot():
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

   
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    rag_chat = RagChatWithMemory()

 
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_id = str(message.from_user.id)
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç —à–∫–æ–ª—ã –¥–∏–∑–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è.\n\n"
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º:\n"
            "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ –î—Ä–µ—Å—Å-–∫–æ–¥\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
        )
        bot.send_message(message.chat.id, welcome_text)

    
    @bot.message_handler(commands=['help'])
    def send_help(message):
        help_text = (
            "üîç –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —à–∫–æ–ª–µ –¥–∏–∑–∞–π–Ω–∞.\n\n"
            "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:\n"
            "‚Ä¢ –í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π?\n"
            "‚Ä¢ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥–µ–∫–∞–Ω–∞—Ç–æ–º?\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–∞–∑–¥—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è?\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/categories - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª\n"
            "/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"
        )
        bot.send_message(message.chat.id, help_text)

    
    @bot.message_handler(commands=['categories'])
    def show_categories(message):
        categories_text = (
            "üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª:\n\n"
            "‚Ä¢ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞\n"
            "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –î—Ä–µ—Å—Å-–∫–æ–¥\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!"
        )
        bot.send_message(message.chat.id, categories_text)

    
    @bot.message_handler(commands=['reset'])
    def reset_conversation(message):
        user_id = str(message.from_user.id)
        if rag_chat.reset_history(user_id):
            bot.send_message(message.chat.id, "üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
        else:
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!")

    
    @bot.message_handler(func=lambda message: True)
    def handle_message(message):
        user_id = str(message.from_user.id)
        query = message.text
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        bot.send_chat_action(message.chat.id, 'typing')
        
        try:
            answer = rag_chat.process_query(user_id, query)
            bot.send_message(message.chat.id, answer)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(
                message.chat.id, 
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

   
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")
    bot.infinity_polling()


def main():
    
    run_telegram_bot()

if __name__ == "__main__":
    main() 
